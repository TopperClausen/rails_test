c
body["data"]["ordered_products"]
body["data"]
body
c
body["data"].first
body["data"]
Order.find(body["data"]["id"]).ordered_products
Order.find(body["data"]["id"])
Order.find body["data"]["id"]
body["data"]["id"]
body["data"]
body[:data]
body
c
cv
order
c
body["basket"].first["amount"]
body["basket"].first
body["basket"]
body[:basket]
body
c
user.basket
response.body
response
get "/users/#{user.id}/baskets", headers: { Authorization: user.jwt }
response.body
user.basket
c
User.all
c
1 == "1"
@user.id
params[:user_id]
params[:user_id].present?
c
params[:user_id]
params
c
@user.basket
@user
authorize
@user
c
@user.basket
@user.basket_product
@user
@user.basket
authorize
c
@user.basket
authorize
c
@user.basket
@user
authorize
c
@user.basket_products
@user.product_baskets
@user.baskets
@user
authorize
c
@user.baskets
self.authorize
c
@user.baskets
@user.basket
@user.basket_products
@user.products
@user
self.authorize
c
self.authorize
authorize
@user
authorize
request.headers
params[:user_id]
params.user_id
params
c
User.from_jwt(jwt).blank?
User.from_jwt(jwt)
jwt.blank?
jwt.blank=
jwt
c
user.authenticate("xd")
user.authenticate(session_params[:password])
user.authenticate?(session_params[:password])
user.authenticate(session_params[:password])
session_params[:password]
user.valid_password?(session_params[:password])
user.password_digest
user.password
user
c
user.valid?
c
user.errors
user.valid?
User.all
user_params
